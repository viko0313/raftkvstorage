syntax = "proto3";

package raftRpcProtoc; //所在命名空间， raft类继承了

//多看几遍，熟悉每个过程需要的结构数据
option cc_generic_services = true;  //开启stub服务

//日志就三个东西 命令，任期和下标
message LogEntry
{
    bytes Command = 1;  //可以省略的，默认给值，但是为了兼容？
    int32 LOGTerm = 2;
    int32 LOGIndex =3;
}

//可以作为心跳，也可以作为同步日志的实体，rf指的是leader
//在protobuf中，对于repeated类型的字段，通常有以下几种方法来操作它们：
//name_size(): 返回该字段中的元素数量。
//Get(index): 根据索引获取列表中的元素。
//add_name() 或 push_back(): 向列表中添加一个元素。
    message AppendEntriesArgs {
        int32 Term = 1;
        int32 LeadId = 2;
        int32 PrevLogIndex = 3;
        int32 prevLogTerm = 4;
        repeated LogEntry Entries = 5;
        //领导者已经提交到其状态机的日志条目的最大索引。
        //用于告知追随者领导者当前的提交进度，以便追随者更新自己的提交索引。
        int32 LeaderCommit = 6;
    }

message AppendEntriesReply {
	int32 Term =1;             // leader的term可能是与Follower不同的，
	bool Success      =2;
	int32 UpdateNextIndex = 3;          //快速调整leader对应的nextIndex
	int32 AppState        =4; // 用来标识节点（网络）状态，可能宕机啥的
}

message RequestVoteArgs {
    int32 Term = 1;
    int32 CandidateId = 2;
    int32 LastLogIndex = 3;
    int32 LastLogTerm = 4;
}

message RequestVoteReply {
    int32 Term = 1;
    bool VoteGranted = 2; //表示请求者的投票请求是否被接受  
    int32 VoteState = 3;    //是否投票？
}

message InstallSnapshotRequest {
    int32 LeaderId = 1;
    int32 Term = 2;
    int32 LastSnapshotIncludeIndex = 3;
    int32 LastSnapshotIncludeTerm = 4;
    bytes Data = 5; //快照信息，当然是用bytes来传递
}

// InstallSnapshotResponse 只用返回Term，因为对于快照只要Term是符合的就是无条件接受的
message InstallSnapshotResponse {
    int32 Term = 1;
}

//rpc节点之间的通信
service raftRpc
{
    rpc AppendEntries(AppendEntriesArgs) returns(AppendEntriesReply);
    rpc InstallSnapshot(InstallSnapshotRequest) returns(InstallSnapshotResponse);
    rpc RequestVote(RequestVoteArgs) returns(RequestVoteReply);
}
